---
layout: guide
title: Match Query
cat: guide
sidebar: reference_query_dsl
---

p. A family of @match@ queries that accept text/numerics/dates, analyzes it, and constructs a query out of it. For example:

<pre class="prettyprint lang-js">
{
    "match" : {
        "message" : "this is a test"
    }
}
</pre>

p. Note, @message@ is the name of a field, you can subsitute the name of any field (including @_all@) instead.

h2. Types of Match Queries

h3. boolean

p. The default @match@ query is of type @boolean@. It means that the text provided is analyzed and the analysis process constructs a boolean query from the provided text. The @operator@ flag can be set to @or@ or @and@ to control the boolean clauses (defaults to @or@).

p. The @analyzer@ can be set to control which analyzer will perform the analysis process on the text. It default to the field explicit mapping definition, or the default search analyzer.

p. @fuzziness@ can be set to a value (depending on the relevant type, for string types it should be a value between @0.0@ and @1.0@) to constructs fuzzy queries for each term analyzed. The @prefix_length@ and @max_expansions@ can be set in this case to control the fuzzy process. If the fuzzy option is set the query will use @constant_score_rewrite@ as its "rewrite method":/guide/reference/query-dsl/multi-term-rewrite.html the @rewrite@ parameter allows to control how the query will get rewritten.

p. Here is an example when providing additional parameters (note the slight change in structure, @message@ is the field name):

<pre class="prettyprint lang-js">
{
    "match" : {
        "message" : {
            "query" : "this is a test",
            "operator" : "and"
        }
    }
}
</pre>


h3. phrase

p. The @match_phrase@ query analyzes the text and creates a @phrase@ query out of the analyzed text. For example:

<pre class="prettyprint lang-js">
{
    "match_phrase" : {
        "message" : "this is a test"
    }
}
</pre>

p. Since @match_phrase@ is only a @type@ of a @match@ query, it can also be used in the following manner:

<pre class="prettyprint lang-js">
{
    "match" : {
        "message" : {
            "query" : "this is a test",
            "type" : "phrase"
        }
    }
}
</pre>

p. A phrase query maintains order of the terms up to a configurable @slop@ (which defaults to 0).

p. The @analyzer@ can be set to control which analyzer will perform the analysis process on the text. It default to the field explicit mapping definition, or the default search analyzer, for example:

<pre class="prettyprint lang-js">
{
    "match_phrase" : {
        "message" : {
            "query" : "this is a test",
            "analyzer" : "my_analyzer"
        }
    }
}
</pre>


h3. match_phrase_prefix

p. The @match_phrase_prefix@ is the same as @match_phrase@, except that it allows for prefix matches on the last term in the text. For example:

<pre class="prettyprint lang-js">
{
    "match_phrase_prefix" : {
        "message" : "this is a test"
    }
}
</pre>

p. Or:

<pre class="prettyprint lang-js">
{
    "match" : {
        "message" : {
            "query" : "this is a test",
            "type" : "phrase_prefix"
        }
    }
}
</pre>

p. It accepts the same parameters as the phrase type. In addition, it also accepts a @max_expansions@ parameter that can control to how many prefixes the last term will be expanded. It is highly recommended to set it to an acceptable value to control the execution time of the query. For example:

<pre class="prettyprint lang-js">
{
    "match_phrase_prefix" : {
        "message" : {
            "query" : "this is a test",
            "max_expansions" : 10
        }
    }
}
</pre>


h2. Comparison to query_string / field

p. The match family of queries does not go through a "query parsing" process. It does not support field name prefixes, wildcard characters, or other "advance" features. For this reason, chances of it failing are very small / non existent, and it provides an excellent behavior when it comes to just analyze and run that text as a query behavior (which is usually what a text search box does). Also, the @phrase_prefix@ type can provide a great "as you type" behavior to automatically load search results.
