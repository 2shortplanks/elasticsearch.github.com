---
layout: guide
title: Java Facets
cat: guide
sidebar: reference_java_api
---

p. Elasticsearch provides a full Java API to play with facets. See the "Facets guide":/guide/reference/api/search/facets/index.html.

p. Use the factory for facet builders (@FacetBuilders@) and add each facet you want to compute when querying and add it to your search request:

<pre class="prettyprint lang-java">
SearchResponse sr = node.client().prepareSearch()
        .setQuery( /* your query */ )
        .addFacet( /* add a facet */ )
        .execute().actionGet();
</pre>

p. Note that you can add more than one facet. See "Search Java API":/guide/reference/api/search.html for details.

p. To build facet requests, use @FacetBuilders@ helpers. Just import them in your class:

<pre class="prettyprint lang-java">
import org.elasticsearch.search.facet.FacetBuilders.*;
</pre>


h1. Facets

h2. Terms Facet

p. Here is how you can use "Terms Facet":/guide/reference/api/search/facets/terms-facet.html with Java API.

h3. Prepare facet request

p. Here is an example on how to create the facet request:

<pre class="prettyprint lang-java">
FacetBuilders.termsFacet("f")
    .field("brand")
    .size(10);
</pre>

h3. Use facet response

p. Import Facet definition classes:

<pre class="prettyprint lang-java">
import org.elasticsearch.search.facet.terms.*;
</pre>

<pre class="prettyprint lang-java">
// sr is here your SearchResponse object
TermsFacet f = (TermsFacet) sr.facets().facetsAsMap().get("f");

f.getTotalCount();      // Total terms doc count
f.getOtherCount();      // Not shown terms doc count
f.getMissingCount();    // Without term doc count

// For each entry
for (TermsFacet.Entry entry : f) {
    entry.getTerm();    // Term
    entry.getCount();   // Doc count
}
</pre>




h2. Range Facet

p. Here is how you can use "Range Facet":/guide/reference/api/search/facets/range-facet.html with Java API.

h3. Prepare facet request

p. Here is an example on how to create the facet request:

<pre class="prettyprint lang-java">
FacetBuilders.rangeFacet("f")
    .field("price")         // Field to compute on
    .addUnboundedFrom(3)    // from -infinity to 3 (excluded)
    .addRange(3, 6)         // from 3 to 6 (excluded)
    .addUnboundedTo(6);     // from 6 to +infinity
</pre>

h3. Use facet response

p. Import Facet definition classes:

<pre class="prettyprint lang-java">
import org.elasticsearch.search.facet.range.*;
</pre>

<pre class="prettyprint lang-java">
// sr is here your SearchResponse object
RangeFacet f = (RangeFacet) sr.facets().facetsAsMap().get("f");

// For each entry
for (RangeFacet.Entry entry : f) {
    entry.getFrom();    // Range from requested
    entry.getTo();      // Range to requested
    entry.getCount();   // Doc count
    entry.getMin();     // Min value
    entry.getMax();     // Max value
    entry.getMean();    // Mean
    entry.getTotal();   // Sum of values
}
</pre>




h2. Histogram Facet

p. Here is how you can use "Histogram Facet":/guide/reference/api/search/facets/histogram-facet.html with Java API.

h3. Prepare facet request

p. Here is an example on how to create the facet request:

<pre class="prettyprint lang-java">
HistogramFacetBuilder facet = FacetBuilders.histogramFacet("f")
    .field("price")
    .interval(1);
</pre>

h3. Use facet response

p. Import Facet definition classes:

<pre class="prettyprint lang-java">
import org.elasticsearch.search.facet.histogram.*;
</pre>

<pre class="prettyprint lang-java">
// sr is here your SearchResponse object
HistogramFacet f = (HistogramFacet) sr.facets().facetsAsMap().get("f");

// For each entry
for (HistogramFacet.Entry entry : f) {
    entry.getKey();     // Key (X-Axis)
    entry.getCount();   // Doc count (Y-Axis)
}
</pre>





h2. Date Histogram Facet

p. Here is how you can use "Date Histogram Facet":/guide/reference/api/search/facets/date-histogram-facet.html with Java API.

h3. Prepare facet request

p. Here is an example on how to create the facet request:

<pre class="prettyprint lang-java">
FacetBuilders.dateHistogramFacet("f")
    .field("date")      // Your date field
    .interval("year");  // You can also use "quarter", "month", "week", "day",
                        // "hour" and "minute" or notation like "1.5h" or "2w"
</pre>

h3. Use facet response

p. Import Facet definition classes:

<pre class="prettyprint lang-java">
import org.elasticsearch.search.facet.datehistogram.*;
</pre>

<pre class="prettyprint lang-java">
// sr is here your SearchResponse object
DateHistogramFacet f = (DateHistogramFacet) sr.facets().facetsAsMap().get("f");

// For each entry
for (DateHistogramFacet.Entry entry : f) {
    entry.getTime();    // Date in ms since epoch (X-Axis)
    entry.getCount();   // Doc count (Y-Axis)
}
</pre>




h2. Filter Facet (not facet filter)

p. Here is how you can use "Filter Facet":/guide/reference/api/search/facets/filter-facet.html with Java API.

p. If you are looking on how to apply a filter to a facet, have a look at "facet filter":#facet-filter using Java API.

h3. Prepare facet request

p. Here is an example on how to create the facet request:

<pre class="prettyprint lang-java">
FacetBuilders.filterFacet("f",
    FilterBuilders.termFilter("brand", "heineken"));    // Your Filter here
</pre>

p. See "Filters":/guide/reference/java-api/query-dsl-filters.html to learn how to build filters using Java.

h3. Use facet response

p. Import Facet definition classes:

<pre class="prettyprint lang-java">
import org.elasticsearch.search.facet.filter.*;
</pre>

<pre class="prettyprint lang-java">
// sr is here your SearchResponse object
FilterFacet f = (FilterFacet) sr.facets().facetsAsMap().get("f");

f.getCount();   // Number of docs that matched
</pre>



h2. Query Facet

p. Here is how you can use "Query Facet":/guide/reference/api/search/facets/query-facet.html with Java API.

h3. Prepare facet request

p. Here is an example on how to create the facet request:

<pre class="prettyprint lang-java">
FacetBuilders.queryFacet("f",
    QueryBuilders.matchQuery("brand", "heineken"));
</pre>

h3. Use facet response

p. Import Facet definition classes:

<pre class="prettyprint lang-java">
import org.elasticsearch.search.facet.query.*;
</pre>

<pre class="prettyprint lang-java">
// sr is here your SearchResponse object
QueryFacet f = (QueryFacet) sr.facets().facetsAsMap().get("f");

f.getCount();   // Number of docs that matched
</pre>

p. See "Queries":/guide/reference/java-api/query-dsl-queries.html to learn how to build queries using Java.






h2. Statistical

p. Here is how you can use "Statistical Facet":/guide/reference/api/search/facets/statistical-facet.html with Java API.

h3. Prepare facet request

p. Here is an example on how to create the facet request:

<pre class="prettyprint lang-java">
FacetBuilders.statisticalFacet("f")
   .field("price");
</pre>

h3. Use facet response

p. Import Facet definition classes:

<pre class="prettyprint lang-java">
import org.elasticsearch.search.facet.statistical.*;
</pre>

<pre class="prettyprint lang-java">
// sr is here your SearchResponse object
StatisticalFacet f = (StatisticalFacet) sr.facets().facetsAsMap().get("f");

f.getCount();           // Doc count
f.getMin();             // Min value
f.getMax();             // Max value
f.getMean();            // Mean
f.getTotal();           // Sum of values
f.getStdDeviation();    // Standard Deviation
f.getSumOfSquares();    // Sum of Squares
f.getVariance();        // Variance
</pre>




h2. Terms Stats Facet

p. Here is how you can use "Terms Stats Facet":/guide/reference/api/search/facets/terms-stats-facet.html with Java API.

h3. Prepare facet request

p. Here is an example on how to create the facet request:

<pre class="prettyprint lang-java">
FacetBuilders.termsStatsFacet("f")
    .keyField("brand")
    .valueField("price");
</pre>

h3. Use facet response

p. Import Facet definition classes:

<pre class="prettyprint lang-java">
import org.elasticsearch.search.facet.termsstats.*;
</pre>

<pre class="prettyprint lang-java">
// sr is here your SearchResponse object
TermsStatsFacet f = (TermsStatsFacet) sr.facets().facetsAsMap().get("f");
f.getTotalCount();      // Total terms doc count
f.getOtherCount();      // Not shown terms doc count
f.getMissingCount();    // Without term doc count

// For each entry
for (TermsStatsFacet.Entry entry : f) {
    entry.getTerm();            // Term
    entry.getCount();           // Doc count
    entry.getMin();             // Min value
    entry.getMax();             // Max value
    entry.getMean();            // Mean
    entry.getTotal();           // Sum of values
}
</pre>



h2. Geo Distance Facet

p. Here is how you can use "Geo Distance Facet":/guide/reference/api/search/facets/geo-distance-facet.html with Java API.

h3. Prepare facet request

p. Here is an example on how to create the facet request:

<pre class="prettyprint lang-java">
FacetBuilders.geoDistanceFacet("f")
    .field("pin.location")              // Field containing coordinates we want to compare with
    .point(40, -70)                     // Point from where we start (0)
    .addUnboundedFrom(10)               // 0 to 10 km (excluded)
    .addRange(10, 20)                   // 10 to 20 km (excluded)
    .addRange(20, 100)                  // 20 to 100 km (excluded)
    .addUnboundedTo(100)                // from 100 km to infinity (and beyond ;-) )
    .unit(DistanceUnit.KILOMETERS);     // All distances are in kilometers. Can be MILES
</pre>

h3. Use facet response

p. Import Facet definition classes:

<pre class="prettyprint lang-java">
import org.elasticsearch.search.facet.geodistance.*;
</pre>

<pre class="prettyprint lang-java">
// sr is here your SearchResponse object
GeoDistanceFacet f = (GeoDistanceFacet) sr.facets().facetsAsMap().get("f");

// For each entry
for (GeoDistanceFacet.Entry entry : f) {
    entry.getFrom();            // Distance from requested
    entry.getTo();              // Distance to requested
    entry.getCount();           // Doc count
    entry.getMin();             // Min value
    entry.getMax();             // Max value
    entry.getTotal();           // Sum of values
    entry.getMean();            // Mean
}
</pre>

<a name="facet-filter"></a>

h1. Facet filters (not Filter Facet)

p. By default, facets are applied on the query resultset whatever filters exists or are.

p. If you need to compute facets with the same filters or even with other filters, you can add the filter to any facet using @AbstractFacetBuilder#facetFilter(FilterBuilder)@ method:

<pre class="prettyprint lang-java">
FacetBuilders
    .termsFacet("f").field("brand") // Your facet
    .facetFilter( // Your filter here
        FilterBuilders.termFilter("colour", "pale")
    );
</pre>

p. For example, you can reuse the same filter you created for your query:

<pre class="prettyprint lang-java">
// A common filter
FilterBuilder filter = FilterBuilders.termFilter("colour", "pale");

TermsFacetBuilder facet = FacetBuilders.termsFacet("f")
    .field("brand")
    .facetFilter(filter);                           // We apply it to the facet

SearchResponse sr = node.client().prepareSearch()
    .setQuery(QueryBuilders.matchAllQuery())
    .setFilter(filter)                              // We apply it to the query
    .addFacet(facet)
    .execute().actionGet();
</pre>

p. See documentation on how to build "Filters":/guide/reference/java-api/query-dsl-filters.html.

h1. Scope

p. By default, facets are computed within the query resultset. But, you can compute facets from all documents in the index whatever the query is, using @global@ parameter:

<pre class="prettyprint lang-java">
TermsFacetBuilder facet = FacetBuilders.termsFacet("f")
    .field("brand")
    .global(true);
</pre>
