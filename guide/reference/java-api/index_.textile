---
layout: guide
title: Index Java API
cat: guide
sidebar: reference_java_api
---

p. The index API allows one to index a typed JSON document into a specific index and make it searchable.

h1. Generate JSON document

p. There are different way of generating JSON document:

* Manually (aka do it yourself) using native @byte[]@ or as a @String@

* Using @Map@ that will be automatically converted to its JSON equivalent

* Using a third party library to serialize your beans such as "Jackson":http://wiki.fasterxml.com/JacksonHome

* Using built-in helpers XContentFactory.jsonBuilder()

p. Internally, each type is converted to @byte[]@ (so a String is converted to a @byte[]@). Therefore, if the object is in this form already, then use it. The @jsonBuilder@ is highly optimized JSON generator that directly constructs a @byte[]@.

h2. Do It Yourself

Nothing really difficult here but note that you will have to encode dates regarding to the ["Date Format":/guide/reference/mapping/date-format.html].

<pre class="prettyprint lang-java">
String json = "{" +
        "\"user\":\"kimchy\"," +
        "\"postDate\":\"2013-01-30\"," +
        "\"message\":\"trying out Elastic Search\"," +
    "}";
</pre>

h2. Using Map

Map is a key:values pair collection. It represents very well a JSON structure:

<pre class="prettyprint lang-java">
Map<String, Object> json = new HashMap<String, Object>();
json.put("user","kimchy");
json.put("postDate",new Date());
json.put("message","trying out Elastic Search");
</pre>

h2. Serialize you beans

Elasticsearch already use Jackson but shade it under @org.elasticsearch.common.jackson@ package.
So, you can add your own Jackson version in your @pom.xml@ file or in your classpath. See ["Jackson Download Page":http://wiki.fasterxml.com/JacksonDownload].

For example:

<pre class="prettyprint lang-xml">
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.1.3</version>
</dependency>
</pre>

Then, you can start serializing your beans to JSON:

<pre class="prettyprint lang-java">
import com.fasterxml.jackson.databind.*;

// instance a json mapper
ObjectMapper mapper = new ObjectMapper(); // create once, reuse

// generate json
String json = mapper.writeValueAsString(yourbeaninstance);
</pre>

h2. Use Elasticsearch helpers

Elasticsearch provides built-in helpers to generate JSON content.

<pre class="prettyprint lang-java">
import static org.elasticsearch.common.xcontent.XContentFactory.*;

XContentBuilder builder = jsonBuilder()
    .startObject()
        .field("user", "kimchy")
        .field("postDate", new Date())
        .field("message", "trying out Elastic Search")
    .endObject()
</pre>

Note that you can also add arrays with @startArray(String)@ and @endArray()@ methods. By the way, @field@ method
accept many object types. You can pass directly numbers, dates and even other XContentBuilder objects.

If you need to see the generated JSON content, you can use the @string()@method.

<pre class="prettyprint lang-java">
String json = builder.string();
</pre>

h1. Index document

The following example indexes a JSON document into an index called twitter, under a type called tweet, with id valued 1:

<pre class="prettyprint lang-java">
import static org.elasticsearch.common.xcontent.XContentFactory.*;

IndexResponse response = client.prepareIndex("twitter", "tweet", "1")
        .setSource(jsonBuilder()
                    .startObject()
                        .field("user", "kimchy")
                        .field("postDate", new Date())
                        .field("message", "trying out Elastic Search")
                    .endObject()
                  )
        .execute()
        .actionGet();
</pre>

Note that you can also index your documents as JSON String and that you don't have to give an ID:

<pre class="prettyprint lang-java">
String json = "{" +
        "\"user\":\"kimchy\"," +
        "\"postDate\":\"2013-01-30\"," +
        "\"message\":\"trying out Elastic Search\"," +
    "}";

IndexResponse response = client.prepareIndex("twitter", "tweet")
        .setSource(json)
        .execute()
        .actionGet();
</pre>

@IndexResponse@ object will give you report:

<pre class="prettyprint lang-java">
// Index name
String _index = response.index();
// Type name
String _type = response.type();
// Document ID (generated or not)
String _id = response.id();
// Version (if it's the first time you index this document, you will get: 1)
long _version = response.version();
</pre>

If you use percolation while indexing, @IndexResponse@ object will give you percolator that have matched:

<pre class="prettyprint lang-java">
IndexResponse response = client.prepareIndex("twitter", "tweet", "1")
        .setSource(json)
        .setPercolate("*")
        .execute()
        .actionGet();

List<String> matches = response.matches();
</pre>

p. For more information on the index operation, check out the REST "index":/guide/reference/api/index_.html docs.

h1. Operation Threading

p. The index API allows to set the threading model the operation will be performed when the actual execution of the API is performed on the same node (the API is executed on a shard that is allocated on the same server).

p. The options are to execute the operation on a different thread, or to execute it on the calling thread (note that the API is still async). By default, @operationThreaded@ is set to @true@ which means the operation is executed on a different thread.
